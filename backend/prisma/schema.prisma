generator client {
  provider        = "prisma-client-js"
  engineType      = "binary"
  previewFeatures = ["interactiveTransactions"]
  binaryTargets   = ["native", "linux-musl", "debian-openssl-1.1.x"]
}

generator zod {
  provider = "zod-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model untitled_table {
  id Int @id @default(autoincrement())
}

model users {
  id          String     @id @db.Uuid
  email       String     @unique
  password    String
  firstname   String?
  lastname    String?
  dateofbirth DateTime?
  role        String?
  bio         String?
  image       String?
  status      String?
  session     sessions[]
  household   households? @relation(fields: [householdid], references: [id])

  createdat       DateTime          @default(now()) @db.Timestamptz()
  updatedat       DateTime          @updatedAt @db.Timestamptz()
  householdid     String?           @db.Uuid
  Householdinvite household_invites[]
}

model sessions {
  id     String @id @db.Uuid
  user   users   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
}

model menus {
  id          String     @id @db.Uuid
  name        String?    @default("New Menu")
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime   @default(now()) @db.Timestamptz()
  householdId String?    @db.Uuid
  Household   households? @relation(fields: [householdId], references: [id])
  createdBy   String?    @db.Uuid
  archived    Boolean?   @default(false)

  grocerylistId String? @unique @db.Uuid

  meals       menu_meals[]
  Grocerylist grocerylists?
}

model meals {
  id         String   @id @db.Uuid
  name       String?  @default("New Meal")
  seasons    String?
  directions String[]
  cuisine    String?
  image      String?
  URL        String?
  prepTime   Int?
  cookTime   Int?
  readyIn    Int?
  rating     String?
  notes      String?
  deleted    Boolean? @default(false)
  createdAt  DateTime @default(now()) @db.Timestamptz()
  createdBy  String?  @db.Uuid

  menu        menu_meals[]
  ingredients meal_ingredients[]
}

model menu_meals {
  id String @id @db.Uuid

  menuId String @db.Uuid
  menu   menus   @relation(fields: [menuId], references: [id])

  mealId String @db.Uuid
  meal   meals   @relation(fields: [mealId], references: [id])
}

model ingredients {
  id         String   @id @db.Uuid
  name       String
  categoryId Int      @default(0)
  createdAt  DateTime @default(now()) @db.Timestamptz()
  createdBy  String?  @db.Uuid

  meal   meal_ingredients[]
  mealId String?          @db.Uuid

  item items[]
}

model meal_ingredients {
  id String @id @db.Uuid

  mealId String @db.Uuid
  meal   meals   @relation(fields: [mealId], references: [id])

  ingredientId String     @db.Uuid
  ingredient   ingredients @relation(fields: [ingredientId], references: [id])
  quantity     String?
}

model grocerylists {
  id          String     @id @db.Uuid
  createdAt   DateTime   @default(now()) @db.Timestamptz()
  createdBy   String?    @db.Uuid
  menuId      String?    @unique @db.Uuid
  menu        menus?      @relation(fields: [menuId], references: [id])
  Item        items[]
  householdId String?    @db.Uuid
  household   households? @relation(fields: [householdId], references: [id])
}

model items {
  id          String  @id @db.Uuid
  check       Boolean @default(false)
  typeId      Int
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz()
  createdBy String?  @db.Uuid

  groceryListId String      @db.Uuid
  groceryList   grocerylists @relation(fields: [groceryListId], references: [id], onDelete: SetNull)

  ingredientId String?     @db.Uuid
  ingredient   ingredients? @relation(fields: [ingredientId], references: [id], onDelete: SetNull)

  Listing listings[]
}

model households {
  id        String @id @db.Uuid
  createdBy String @db.Uuid

  createdAt DateTime @default(now()) @db.Timestamptz()

  users           users[]
  menus           menus[]
  HouseholdInvite household_invites[]
  Grocerylist     grocerylists[]
}

model household_invites {
  id        String   @id @db.Uuid
  createdBy String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()

  householdId String    @db.Uuid
  household   households @relation(fields: [householdId], references: [id], onDelete: SetNull)

  userId String @db.Uuid
  user   users   @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model listings {
  id        String   @id @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()

  itemId String @db.Uuid
  item   items   @relation(fields: [itemId], references: [id], onDelete: SetNull)

  price String
}

model categories {
  id   Int    @id @default(autoincrement())
  name String
}
