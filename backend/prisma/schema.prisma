generator client {
  provider        = "prisma-client-js"
  engineType      = "binary"
  previewFeatures = ["interactiveTransactions"]
  binaryTargets   = ["native", "linux-musl", "debian-openssl-1.1.x"]
}

generator zod {
  provider = "zod-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model untitled_table {
  id Int @id @default(autoincrement())
}

model User {
  id          String     @id @db.Uuid
  email       String     @unique
  password    String
  firstName   String?
  lastName    String?
  dateOfBirth DateTime?
  role        String?
  bio         String?
  image       String?
  status      String?
  session     Session[]
  household   Household? @relation(fields: [householdId], references: [id])

  createdAt       DateTime          @default(now()) @db.Timestamptz()
  updatedAt       DateTime          @updatedAt @db.Timestamptz()
  householdId     String?           @db.Uuid
  HouseholdInvite HouseholdInvite[]
}

model Session {
  id     String @id @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
}

model Menu {
  id          String     @id @db.Uuid
  name        String?    @default("New Menu")
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime   @default(now()) @db.Timestamptz()
  householdId String?    @db.Uuid
  Household   Household? @relation(fields: [householdId], references: [id])

  grocerylist Grocerylist?
  meals       MenuMeals[]
}

model Meal {
  id         String   @id @db.Uuid
  name       String?  @default("New Meal")
  seasons    String?
  directions String[]
  cuisine    String?
  image      String?
  URL        String?
  prepTime   Int?
  cookTime   Int?
  readyIn    Int?
  rating     String?
  notes      String?
  createdAt  DateTime @default(now()) @db.Timestamptz()
  createdBy  String?  @db.Uuid

  menu        MenuMeals?
  ingredients MealIngredient[]
}

model MenuMeals {
  id String @id @db.Uuid

  menuId String @db.Uuid
  menu   Menu   @relation(fields: [menuId], references: [id])

  mealId String @unique @db.Uuid
  meal   Meal   @relation(fields: [mealId], references: [id])
}

model Ingredient {
  id        String   @id @db.Uuid
  name      String
  createdAt DateTime @default(now()) @db.Timestamptz()

  meal   MealIngredient[]
  mealId String?          @db.Uuid

  item Item[]
}

model MealIngredient {
  id String @id @db.Uuid

  mealId String @db.Uuid
  meal   Meal   @relation(fields: [mealId], references: [id])

  ingredientId String     @db.Uuid
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  quantity     String?
}

model Grocerylist {
  id        String   @id @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  menuId    String?  @unique @db.Uuid
  menu      Menu?    @relation(fields: [menuId], references: [id])
  Item      Item[]
}

model Item {
  id          String  @id @db.Uuid
  check       Boolean @default(false)
  typeId      Int
  description String?

  groceryListId String      @unique @db.Uuid
  groceryList   Grocerylist @relation(fields: [groceryListId], references: [id], onDelete: SetNull)

  ingredientId String?     @unique @db.Uuid
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id], onDelete: SetNull)
}

model Household {
  id        String @id @db.Uuid
  createdBy String @db.Uuid

  createdAt DateTime @default(now()) @db.Timestamptz()

  users           User[]
  menus           Menu[]
  HouseholdInvite HouseholdInvite[]
}

model HouseholdInvite {
  id        String   @id @db.Uuid
  createdBy String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()

  householdId String    @db.Uuid
  household   Household @relation(fields: [householdId], references: [id], onDelete: SetNull)

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: SetNull)
}
