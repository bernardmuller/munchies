// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: households.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createHousehold = `-- name: CreateHousehold :one
INSERT INTO households(id, createdby, createdat, active)
VALUES ($1, $2, now(), true)
RETURNING id, createdby, createdat, active
`

type CreateHouseholdParams struct {
	ID        uuid.UUID
	Createdby uuid.UUID
}

func (q *Queries) CreateHousehold(ctx context.Context, arg CreateHouseholdParams) (Household, error) {
	row := q.db.QueryRowContext(ctx, createHousehold, arg.ID, arg.Createdby)
	var i Household
	err := row.Scan(
		&i.ID,
		&i.Createdby,
		&i.Createdat,
		&i.Active,
	)
	return i, err
}

const getAllHouseholds = `-- name: GetAllHouseholds :many
SELECT id, createdby, createdat, active FROM households
`

func (q *Queries) GetAllHouseholds(ctx context.Context) ([]Household, error) {
	rows, err := q.db.QueryContext(ctx, getAllHouseholds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Household
	for rows.Next() {
		var i Household
		if err := rows.Scan(
			&i.ID,
			&i.Createdby,
			&i.Createdat,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHouseholdById = `-- name: GetHouseholdById :one
SELECT id, createdby, createdat, active FROM households 
WHERE id = $1
`

func (q *Queries) GetHouseholdById(ctx context.Context, id uuid.UUID) (Household, error) {
	row := q.db.QueryRowContext(ctx, getHouseholdById, id)
	var i Household
	err := row.Scan(
		&i.ID,
		&i.Createdby,
		&i.Createdat,
		&i.Active,
	)
	return i, err
}
