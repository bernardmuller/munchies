// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: households.sql

package postgres

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const activateHousehold = `-- name: ActivateHousehold :one
UPDATE households 
SET active = true
WHERE id = $1
RETURNING id, createdby, createdat, active
`

func (q *Queries) ActivateHousehold(ctx context.Context, id uuid.UUID) (Household, error) {
	row := q.db.QueryRowContext(ctx, activateHousehold, id)
	var i Household
	err := row.Scan(
		&i.ID,
		&i.Createdby,
		&i.Createdat,
		&i.Active,
	)
	return i, err
}

const addUserToHousehold = `-- name: AddUserToHousehold :one
UPDATE users 
SET household_id = $1
WHERE id = $2
RETURNING id, clerk_id, email, firstname, lastname, role_id, image, status, createdat, updatedat, household_id
`

type AddUserToHouseholdParams struct {
	HouseholdID uuid.NullUUID
	ID          uuid.UUID
}

func (q *Queries) AddUserToHousehold(ctx context.Context, arg AddUserToHouseholdParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addUserToHousehold, arg.HouseholdID, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ClerkID,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.RoleID,
		&i.Image,
		&i.Status,
		&i.Createdat,
		&i.Updatedat,
		&i.HouseholdID,
	)
	return i, err
}

const createHousehold = `-- name: CreateHousehold :one
INSERT INTO households(id, createdby, createdat, active)
VALUES ($1, $2, now(), true)
RETURNING id, createdby, createdat, active
`

type CreateHouseholdParams struct {
	ID        uuid.UUID
	Createdby uuid.UUID
}

func (q *Queries) CreateHousehold(ctx context.Context, arg CreateHouseholdParams) (Household, error) {
	row := q.db.QueryRowContext(ctx, createHousehold, arg.ID, arg.Createdby)
	var i Household
	err := row.Scan(
		&i.ID,
		&i.Createdby,
		&i.Createdat,
		&i.Active,
	)
	return i, err
}

const deactivateHousehold = `-- name: DeactivateHousehold :one
UPDATE households 
SET active = false
WHERE id = $1
RETURNING id, createdby, createdat, active
`

func (q *Queries) DeactivateHousehold(ctx context.Context, id uuid.UUID) (Household, error) {
	row := q.db.QueryRowContext(ctx, deactivateHousehold, id)
	var i Household
	err := row.Scan(
		&i.ID,
		&i.Createdby,
		&i.Createdat,
		&i.Active,
	)
	return i, err
}

const getAllHouseholds = `-- name: GetAllHouseholds :many
SELECT id, createdby, createdat, active FROM households
`

func (q *Queries) GetAllHouseholds(ctx context.Context) ([]Household, error) {
	rows, err := q.db.QueryContext(ctx, getAllHouseholds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Household
	for rows.Next() {
		var i Household
		if err := rows.Scan(
			&i.ID,
			&i.Createdby,
			&i.Createdat,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHouseholdById = `-- name: GetHouseholdById :one
SELECT id, createdby, createdat, active FROM households 
WHERE id = $1
`

func (q *Queries) GetHouseholdById(ctx context.Context, id uuid.UUID) (Household, error) {
	row := q.db.QueryRowContext(ctx, getHouseholdById, id)
	var i Household
	err := row.Scan(
		&i.ID,
		&i.Createdby,
		&i.Createdat,
		&i.Active,
	)
	return i, err
}

const getHouseholdByUserId = `-- name: GetHouseholdByUserId :one
SELECT id, createdby, createdat, active
FROM households
WHERE createdby = $1
`

func (q *Queries) GetHouseholdByUserId(ctx context.Context, createdby uuid.UUID) (Household, error) {
	row := q.db.QueryRowContext(ctx, getHouseholdByUserId, createdby)
	var i Household
	err := row.Scan(
		&i.ID,
		&i.Createdby,
		&i.Createdat,
		&i.Active,
	)
	return i, err
}

const getHouseholdDetailsByUserId = `-- name: GetHouseholdDetailsByUserId :one
WITH user_household As (
	SELECT household_id
	FROM users 
	WHERE users.id = $1
),
household_row AS (
    SELECT id, createdby, createdat, active
    FROM households
    WHERE id = (SELECT household_id FROM user_household)
),
users AS (
    SELECT id, firstname, lastname, household_id
    FROM users
    WHERE household_id = (SELECT id FROM household_row)
),
latest_grocerylist AS (
    SELECT id, createdat, createdby, menu_id, household_id
    FROM grocerylists
    WHERE household_id = (SELECT id FROM household_row)
    ORDER BY createdat DESC
    LIMIT 1
)
SELECT
    h.id as "id",
    h.createdby as "createdby",
    h.createdat as "createdat",
    h.active as "active",
    json_agg(u) AS "members",
    json_build_object(
        'id', gl.id,
        'createdat', gl."createdat",
        'items', (
            SELECT json_agg(
                json_build_object(
                    'id', i.id,
                    'type', i.typeid,
                    'check', i.check,
                    'ingredient', ing.*,
                    'createdby', u.firstname
                )
            )
            FROM items i
            LEFT JOIN ingredients ing ON i.ingredient_id = ing.id
            LEFT JOIN users u ON i.createdby = u.id
            WHERE i.grocerylist_id = gl.id
        )
    ) AS grocerylist
FROM household_row h
LEFT JOIN users u ON h.id = u.household_id
LEFT JOIN latest_grocerylist gl ON h.id = gl.household_id
GROUP BY h.id, gl.id, h.createdby, h.createdat, h.active, gl.createdat
`

type GetHouseholdDetailsByUserIdRow struct {
	ID          uuid.UUID
	Createdby   uuid.UUID
	Createdat   time.Time
	Active      sql.NullBool
	Members     json.RawMessage
	Grocerylist json.RawMessage
}

func (q *Queries) GetHouseholdDetailsByUserId(ctx context.Context, id uuid.UUID) (GetHouseholdDetailsByUserIdRow, error) {
	row := q.db.QueryRowContext(ctx, getHouseholdDetailsByUserId, id)
	var i GetHouseholdDetailsByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.Createdby,
		&i.Createdat,
		&i.Active,
		&i.Members,
		&i.Grocerylist,
	)
	return i, err
}

const removeUserFromHousehold = `-- name: RemoveUserFromHousehold :one
UPDATE users 
SET household_id = NULL
WHERE id = $1
RETURNING id, clerk_id, email, firstname, lastname, role_id, image, status, createdat, updatedat, household_id
`

func (q *Queries) RemoveUserFromHousehold(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, removeUserFromHousehold, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ClerkID,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.RoleID,
		&i.Image,
		&i.Status,
		&i.Createdat,
		&i.Updatedat,
		&i.HouseholdID,
	)
	return i, err
}
