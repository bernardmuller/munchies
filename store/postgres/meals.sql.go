// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: meals.sql

package postgres

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMeal = `-- name: CreateMeal :one
INSERT INTO meals (name,  createdat, updatedat)
VALUES ($1, now(), now())
RETURNING id, name, deleted, createdat, createdby
`

func (q *Queries) CreateMeal(ctx context.Context, name sql.NullString) (Meal, error) {
	row := q.db.QueryRowContext(ctx, createMeal, name)
	var i Meal
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Deleted,
		&i.Createdat,
		&i.Createdby,
	)
	return i, err
}

const deleteMeal = `-- name: DeleteMeal :exec
DELETE FROM meals
WHERE id = $1
RETURNING id, name, deleted, createdat, createdby
`

func (q *Queries) DeleteMeal(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMeal, id)
	return err
}

const getMealById = `-- name: GetMealById :one
SELECT id, name, deleted, createdat, createdby FROM meals
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMealById(ctx context.Context, id uuid.UUID) (Meal, error) {
	row := q.db.QueryRowContext(ctx, getMealById, id)
	var i Meal
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Deleted,
		&i.Createdat,
		&i.Createdby,
	)
	return i, err
}

const getMeals = `-- name: GetMeals :many
SELECT id, name, deleted, createdat, createdby FROM meals
ORDER BY createdat DESC
`

func (q *Queries) GetMeals(ctx context.Context) ([]Meal, error) {
	rows, err := q.db.QueryContext(ctx, getMeals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meal
	for rows.Next() {
		var i Meal
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Deleted,
			&i.Createdat,
			&i.Createdby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMealsByUserId = `-- name: GetMealsByUserId :many
SELECT id, name, deleted, createdat, createdby FROM meals
WHERE createdby = $1
ORDER BY createdat DESC
`

func (q *Queries) GetMealsByUserId(ctx context.Context, createdby uuid.NullUUID) ([]Meal, error) {
	rows, err := q.db.QueryContext(ctx, getMealsByUserId, createdby)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meal
	for rows.Next() {
		var i Meal
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Deleted,
			&i.Createdat,
			&i.Createdby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMeal = `-- name: UpdateMeal :exec
UPDATE meals
SET name = $1, updatedat = now()
WHERE id = $2
RETURNING id, name, deleted, createdat, createdby
`

type UpdateMealParams struct {
	Name sql.NullString
	ID   uuid.UUID
}

func (q *Queries) UpdateMeal(ctx context.Context, arg UpdateMealParams) error {
	_, err := q.db.ExecContext(ctx, updateMeal, arg.Name, arg.ID)
	return err
}
