// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: items.sql

package postgres

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (id, "check", typeid, description, createdat, createdby, grocerylist_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, "check", typeid, description, createdat, createdby, grocerylist_id, ingredient_id
`

type CreateItemParams struct {
	ID            uuid.UUID
	Check         bool
	Typeid        int32
	Description   sql.NullString
	Createdat     time.Time
	Createdby     uuid.NullUUID
	GrocerylistID uuid.UUID
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.ID,
		arg.Check,
		arg.Typeid,
		arg.Description,
		arg.Createdat,
		arg.Createdby,
		arg.GrocerylistID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Check,
		&i.Typeid,
		&i.Description,
		&i.Createdat,
		&i.Createdby,
		&i.GrocerylistID,
		&i.IngredientID,
	)
	return i, err
}

const getItemById = `-- name: GetItemById :one
SELECT id, "check", typeid, description, createdat, createdby, grocerylist_id, ingredient_id FROM items WHERE id = $1
`

func (q *Queries) GetItemById(ctx context.Context, id uuid.UUID) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItemById, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Check,
		&i.Typeid,
		&i.Description,
		&i.Createdat,
		&i.Createdby,
		&i.GrocerylistID,
		&i.IngredientID,
	)
	return i, err
}

const getItems = `-- name: GetItems :many
SELECT id, "check", typeid, description, createdat, createdby, grocerylist_id, ingredient_id FROM items
`

func (q *Queries) GetItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Check,
			&i.Typeid,
			&i.Description,
			&i.Createdat,
			&i.Createdby,
			&i.GrocerylistID,
			&i.IngredientID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
