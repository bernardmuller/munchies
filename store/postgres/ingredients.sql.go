// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: ingredients.sql

package postgres

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredients(id, name, categoryId)
VALUES ($1, $2, $3)
RETURNING id, name, categoryid, createdat, updatedat
`

type CreateIngredientParams struct {
	ID         uuid.UUID
	Name       sql.NullString
	Categoryid sql.NullString
}

func (q *Queries) CreateIngredient(ctx context.Context, arg CreateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, createIngredient, arg.ID, arg.Name, arg.Categoryid)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Categoryid,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getAllIngredients = `-- name: GetAllIngredients :many
SELECT id, name, categoryid, createdat, updatedat FROM ingredients
`

func (q *Queries) GetAllIngredients(ctx context.Context) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, getAllIngredients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Categoryid,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIngredientById = `-- name: GetIngredientById :one
SELECT id, name, categoryid, createdat, updatedat FROM ingredients 
WHERE id = $1
`

func (q *Queries) GetIngredientById(ctx context.Context, id uuid.UUID) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredientById, id)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Categoryid,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const updateIngredient = `-- name: UpdateIngredient :one
UPDATE ingredients
SET id = $1, name = $2, categoryId = $3
WHERE id = $1
RETURNING id, name, categoryid, createdat, updatedat
`

type UpdateIngredientParams struct {
	ID         uuid.UUID
	Name       sql.NullString
	Categoryid sql.NullString
}

func (q *Queries) UpdateIngredient(ctx context.Context, arg UpdateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, updateIngredient, arg.ID, arg.Name, arg.Categoryid)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Categoryid,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
