// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: roles_permissions.sql

package postgres

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const assignPermissionToRole = `-- name: AssignPermissionToRole :one
INSERT INTO "role_permissions"
(role_id, permission_id, createdat, updatedat)
VALUES ($1, $2, $3, $4) 
RETURNING role_id, permission_id, createdat, updatedat
`

type AssignPermissionToRoleParams struct {
	RoleID       uuid.UUID
	PermissionID uuid.UUID
	Createdat    time.Time
	Updatedat    time.Time
}

func (q *Queries) AssignPermissionToRole(ctx context.Context, arg AssignPermissionToRoleParams) (RolePermission, error) {
	row := q.db.QueryRowContext(ctx, assignPermissionToRole,
		arg.RoleID,
		arg.PermissionID,
		arg.Createdat,
		arg.Updatedat,
	)
	var i RolePermission
	err := row.Scan(
		&i.RoleID,
		&i.PermissionID,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const createPermission = `-- name: CreatePermission :one
INSERT INTO "permissions"
(name, description, createdat, updatedat)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, createdat, updatedat
`

type CreatePermissionParams struct {
	Name        string
	Description sql.NullString
	Createdat   time.Time
	Updatedat   time.Time
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermission,
		arg.Name,
		arg.Description,
		arg.Createdat,
		arg.Updatedat,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO "roles"
(name, createdat, updatedat)
VALUES ($1, now(), now())
RETURNING id, name, createdat, updatedat
`

func (q *Queries) CreateRole(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM "permissions"
WHERE id = $1
`

func (q *Queries) DeletePermission(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePermission, id)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM "roles"
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const deleteRolePermission = `-- name: DeleteRolePermission :exec
DELETE FROM "role_permissions"
WHERE role_id = $1 AND permission_id = $2
`

type DeleteRolePermissionParams struct {
	RoleID       uuid.UUID
	PermissionID uuid.UUID
}

func (q *Queries) DeleteRolePermission(ctx context.Context, arg DeleteRolePermissionParams) error {
	_, err := q.db.ExecContext(ctx, deleteRolePermission, arg.RoleID, arg.PermissionID)
	return err
}

const getAllPermissions = `-- name: GetAllPermissions :many
SELECT id, name, description, createdat, updatedat FROM "permissions"
`

func (q *Queries) GetAllPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getAllPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRoles = `-- name: GetAllRoles :many
SELECT id, name, createdat, updatedat FROM "roles"
`

func (q *Queries) GetAllRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionById = `-- name: GetPermissionById :one
SELECT id, name, description, createdat, updatedat FROM "permissions"
WHERE id = $1
`

func (q *Queries) GetPermissionById(ctx context.Context, id uuid.UUID) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermissionById, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getRoleById = `-- name: GetRoleById :one
SELECT id, name, createdat, updatedat FROM "roles"
WHERE id = $1
`

func (q *Queries) GetRoleById(ctx context.Context, id uuid.UUID) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleById, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getRoleByPermissionId = `-- name: GetRoleByPermissionId :many
SELECT 
	r.id, r.name, r.createdat, r.updatedat,
	p.id as permission_id
FROM "roles" r
LEFT JOIN "permissions" p ON 
	p.id = r.id
WHERE p.id = $1
`

type GetRoleByPermissionIdRow struct {
	ID           uuid.UUID
	Name         string
	Createdat    time.Time
	Updatedat    time.Time
	PermissionID uuid.NullUUID
}

func (q *Queries) GetRoleByPermissionId(ctx context.Context, id uuid.UUID) ([]GetRoleByPermissionIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getRoleByPermissionId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoleByPermissionIdRow
	for rows.Next() {
		var i GetRoleByPermissionIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Createdat,
			&i.Updatedat,
			&i.PermissionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleByUserId = `-- name: GetRoleByUserId :many
SELECT 
	r.id, r.name, r.createdat, r.updatedat,
	u.id as user_id
FROM "roles" r
LEFT JOIN "users" u ON 
	u.role_id = r.id
WHERE u.id = $1
`

type GetRoleByUserIdRow struct {
	ID        uuid.UUID
	Name      string
	Createdat time.Time
	Updatedat time.Time
	UserID    uuid.NullUUID
}

func (q *Queries) GetRoleByUserId(ctx context.Context, id uuid.UUID) ([]GetRoleByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getRoleByUserId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoleByUserIdRow
	for rows.Next() {
		var i GetRoleByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Createdat,
			&i.Updatedat,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleWithPermissions = `-- name: GetRoleWithPermissions :many
SELECT 
	r.id AS role_id,
	p.id AS permission_id,
	r.name,
	p.name as permission,
	p.description as description
FROM 
	"role_permissions" rp
LEFT JOIN "roles" r ON 
	rp.role_id = r.id
LEFT JOIN "permissions" p ON 
	rp.permission_id = p.id
WHERE role_id = $1
`

type GetRoleWithPermissionsRow struct {
	RoleID       uuid.NullUUID
	PermissionID uuid.NullUUID
	Name         sql.NullString
	Permission   sql.NullString
	Description  sql.NullString
}

func (q *Queries) GetRoleWithPermissions(ctx context.Context, roleID uuid.UUID) ([]GetRoleWithPermissionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRoleWithPermissions, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoleWithPermissionsRow
	for rows.Next() {
		var i GetRoleWithPermissionsRow
		if err := rows.Scan(
			&i.RoleID,
			&i.PermissionID,
			&i.Name,
			&i.Permission,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolesByUserId = `-- name: GetRolesByUserId :many
SELECT 
	r.id, r.name, r.createdat, r.updatedat,
	u.id as user_id
FROM "roles" r
LEFT JOIN "users" u ON 
	u.role_id = r.id
WHERE u.id = $1
`

type GetRolesByUserIdRow struct {
	ID        uuid.UUID
	Name      string
	Createdat time.Time
	Updatedat time.Time
	UserID    uuid.NullUUID
}

func (q *Queries) GetRolesByUserId(ctx context.Context, id uuid.UUID) ([]GetRolesByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getRolesByUserId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRolesByUserIdRow
	for rows.Next() {
		var i GetRolesByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Createdat,
			&i.Updatedat,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
